#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è Reels —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ
"""

import sys
import re
sys.path.append('langdetect')
import langdetect as ld

class EnhancedReelsDetector:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è Reels —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ"""
    
    def __init__(self):
        self.profiles = ld.create_languages_profiles()
        
        # –ö–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
        self.kazakh_words = {
            'qazaq', 'qazaqstan', 'almaty', 'abay', 'nauryz', 'men', 'sen', 'ol',
            'biz', 'siz', 'olar', 'bolyp', 'zhane', 'menin', 'senin', 'onyng',
            'bizding', 'sizding', 'olardyn', 'tili', 'tiller', 'memeleket', 'qala',
            'khalq', 'el', 'adam', 'zhyl', 'kuni', 'mereke', 'koktem', 'tabighat',
            'super', 'balamyn', 'otanym', 'ir—ñ', 'aqyny', 'merekesi', 'keluin'
        }
    
    def has_kazakh_cyrillic(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–∑–∞—Ö—Å–∫–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        kazakh_chars = set('”ô“õ“£”©“±“Ø—ñ')
        return any(char in text.lower() for char in kazakh_chars)
    
    def has_latin_kazakh(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ"""
        text_lower = text.lower()
        words = re.findall(r'\b\w+\b', text_lower)
        
        if not words:
            return False
        
        kazakh_word_count = sum(1 for word in words if word in self.kazakh_words)
        return kazakh_word_count / len(words) > 0.2  # 20% —Å–ª–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∑–∞—Ö—Å–∫–∏–º–∏
    
    def detect_language(self, text, min_confidence=0.5):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ"""
        
        if not text or not text.strip():
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'method': 'empty_text',
                'status': 'empty_text'
            }
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned_text = self._clean_text(text)
        
        if len(cleaned_text) < 3:
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'method': 'text_too_short',
                'status': 'text_too_short'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        if self.has_kazakh_cyrillic(cleaned_text):
            result = ld.detect_language(cleaned_text, self.profiles)
            result_list = list(result)
            
            if result_list and result_list[0][0] == 'kk':
                confidence = result_list[0][1]
                status = 'success' if confidence >= min_confidence else 'low_confidence'
                
                return {
                    'language': 'kk',
                    'language_name': 'Kazakh',
                    'confidence': confidence,
                    'method': 'cyrillic_detection',
                    'status': status,
                    'all_results': result_list[:3]
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        if self.has_latin_kazakh(cleaned_text):
            return {
                'language': 'kk',
                'language_name': 'Kazakh',
                'confidence': 0.85,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                'method': 'latin_pattern_detection',
                'status': 'success',
                'all_results': [('kk', 0.85), ('ru', 0.10), ('en', 0.05)]
            }
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        try:
            result = ld.detect_language(cleaned_text, self.profiles)
            result_list = list(result)
            
            if result_list:
                best_lang, best_confidence = result_list[0]
                status = 'success' if best_confidence >= min_confidence else 'low_confidence'
                
                return {
                    'language': best_lang,
                    'language_name': self._get_language_name(best_lang),
                    'confidence': best_confidence,
                    'method': 'standard_detection',
                    'status': status,
                    'all_results': result_list[:3]
                }
        except Exception as e:
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'method': 'error',
                'status': 'error',
                'error': str(e)
            }
        
        return {
            'language': None,
            'language_name': None,
            'confidence': 0.0,
            'method': 'no_detection',
            'status': 'no_detection'
        }
    
    def _clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º URL
        text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ö–µ—à—Ç–µ–≥–∏
        text = re.sub(r'@\w+', '', text)
        text = re.sub(r'#\w+', '', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    def _get_language_name(self, lang_code):
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É"""
        names = {
            'kk': 'Kazakh', 'ru': 'Russian', 'en': 'English', 'es': 'Spanish',
            'fr': 'French', 'de': 'German', 'it': 'Italian', 'ar': 'Arabic'
        }
        return names.get(lang_code, lang_code)
    
    def process_reel(self, reel_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ Reel"""
        text_sources = []
        
        if 'caption' in reel_data and reel_data['caption']:
            text_sources.append(reel_data['caption'])
        
        if 'transcript' in reel_data and reel_data['transcript']:
            text_sources.append(reel_data['transcript'])
        
        if not text_sources:
            reel_data['language_detection'] = {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'status': 'no_text'
            }
            return reel_data
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã
        combined_text = ' '.join(text_sources)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        detection_result = self.detect_language(combined_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        reel_data['language_detection'] = detection_result
        reel_data['language'] = detection_result['language']
        reel_data['language_confidence'] = detection_result['confidence']
        
        return reel_data

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã"""
    
    detector = EnhancedReelsDetector()
    
    test_reels = [
        {
            'id': 1,
            'caption': 'men super balamyn! üá∞üáø',
            'transcript': 'men qazaq tili uiretin bala'
        },
        {
            'id': 2,
            'caption': '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º!',
            'transcript': '–ë“Ø–≥—ñ–Ω –±—ñ–∑ –ê–ª–º–∞—Ç—ã–¥–∞ –∂–∞“£–∞ –∂–æ–±–∞ —Ç—É—Ä–∞–ª—ã –∞–π—Ç–∞–º—ã–∑'
        },
        {
            'id': 3,
            'caption': 'Qazaqstan - menin Otanym!',
            'transcript': 'Almaty - Qazaqstannyn en iri qalasy'
        },
        {
            'id': 4,
            'caption': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –º–æ—è –†–æ–¥–∏–Ω–∞!',
            'transcript': '–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞–º –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞'
        }
    ]
    
    print("üé¨ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –î–ï–¢–ï–ö–¢–û–†–ê REELS")
    print("=" * 50)
    
    for reel in test_reels:
        processed = detector.process_reel(reel.copy())
        detection = processed['language_detection']
        
        print(f"\nReel {reel['id']}:")
        print(f"  Caption: {reel['caption']}")
        print(f"  Transcript: {reel['transcript']}")
        print(f"  –Ø–∑—ã–∫: {detection['language']} ({detection['language_name']})")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection['confidence']:.1%}")
        print(f"  –ú–µ—Ç–æ–¥: {detection['method']}")
        print(f"  –°—Ç–∞—Ç—É—Å: {detection['status']}")

if __name__ == "__main__":
    main()
