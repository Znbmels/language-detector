#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
"""

import sys
sys.path.append('langdetect')
import langdetect as ld

def main():
    print("üá∞üáø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–ê–ó–ê–•–°–ö–û–ì–û –Ø–ó–´–ö–ê üá∞üáø")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    print("–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
    profiles = ld.create_languages_profiles()
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(profiles)} —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
    print(f"‚úÖ –ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ {'–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' if 'kk' in profiles else '–ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_texts = [
        {
            'lang': 'kk',
            'name': '–ö–∞–∑–∞—Ö—Å–∫–∏–π',
            'texts': [
                "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º!",
                "–ê–±–∞–π “ö“±–Ω–∞–Ω–±–∞–π“±–ª—ã “õ–∞–∑–∞“õ—Ç—ã“£ “±–ª—ã –∞“õ—ã–Ω—ã.",
                "–ù–∞—É—Ä—ã–∑ –º–µ—Ä–µ–∫–µ—Å—ñ –∫”©–∫—Ç–µ–º–Ω—ñ“£ –∫–µ–ª—É—ñ–Ω –±—ñ–ª–¥—ñ—Ä–µ–¥—ñ.",
                "–ê–ª–º–∞—Ç—ã - “ö–∞–∑–∞“õ—Å—Ç–∞–Ω–Ω—ã“£ –µ“£ —ñ—Ä—ñ “õ–∞–ª–∞—Å—ã.",
                "–î–æ–º–±—ã—Ä–∞ - “õ–∞–∑–∞“õ—Ç–∞—Ä–¥—ã“£ “±–ª—Ç—Ç—ã“õ –∞—Å–ø–∞–±—ã."
            ]
        },
        {
            'lang': 'ru', 
            'name': '–†—É—Å—Å–∫–∏–π',
            'texts': [
                "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –º–æ—è –†–æ–¥–∏–Ω–∞!",
                "–ê–±–∞–π –ö—É–Ω–∞–Ω–±–∞–µ–≤ - –≤–µ–ª–∏–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π –ø–æ—ç—Ç.",
                "–ü—Ä–∞–∑–¥–Ω–∏–∫ –ù–∞—É—Ä—ã–∑ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏—Ö–æ–¥ –≤–µ—Å–Ω—ã.",
                "–ê–ª–º–∞—Ç—ã - –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.",
                "–î–æ–º–±—Ä–∞ - –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–∞–∑–∞—Ö–æ–≤."
            ]
        },
        {
            'lang': 'en',
            'name': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 
            'texts': [
                "Kazakhstan is my homeland!",
                "Abay Kunanbayev is a great Kazakh poet.",
                "Nauryz holiday symbolizes the arrival of spring.",
                "Almaty is the largest city in Kazakhstan.",
                "Dombra is the national instrument of Kazakhs."
            ]
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —è–∑—ã–∫
    for lang_group in test_texts:
        lang_code = lang_group['lang']
        lang_name = lang_group['name']
        texts = lang_group['texts']
        
        print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: {lang_name.upper()} ({lang_code})")
        print("-" * 40)
        
        correct = 0
        total = len(texts)
        
        for i, text in enumerate(texts, 1):
            result = ld.detect_language(text, profiles)
            result_list = list(result)
            
            if result_list:
                detected_lang = result_list[0][0]
                confidence = result_list[0][1]
                
                is_correct = detected_lang == lang_code
                if is_correct:
                    correct += 1
                
                status = "‚úÖ" if is_correct else "‚ùå"
                print(f"{status} –¢–µ–∫—Å—Ç {i}: {text}")
                print(f"   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {detected_lang} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
                
                if len(result_list) > 1:
                    other_results = [(lang, conf) for lang, conf in result_list[1:3]]
                    print(f"   –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {other_results}")
            else:
                print(f"‚ùå –¢–µ–∫—Å—Ç {i}: {text}")
                print("   –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫")
            
            print()
        
        accuracy = correct / total * 100
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({accuracy:.1f}%)")
        print()
    
    # –¢–µ—Å—Ç –Ω–∞ —Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    print("üîÄ –¢–ï–°–¢ –ù–ê –°–ú–ï–®–ê–ù–ù–´–ï –¢–ï–ö–°–¢–´")
    print("-" * 40)
    
    mixed_texts = [
        "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω Kazakhstan –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "Hello –°”ô–ª–µ–º –ü—Ä–∏–≤–µ—Ç", 
        "–ê–±–∞–π Abay –ê–±–∞–π",
        "üá∞üáø #Kazakhstan #“ö–∞–∑–∞“õ—Å—Ç–∞–Ω #–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
        "–ê–ª–º–∞—Ç—ã Almaty –ê–ª–º–∞—Ç—ã - beautiful city!"
    ]
    
    for text in mixed_texts:
        result = ld.detect_language(text, profiles)
        result_list = list(result)
        
        print(f"üìù –¢–µ–∫—Å—Ç: {text}")
        if result_list:
            top_3 = result_list[:3]
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {top_3}")
        else:
            print("   –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫")
        print()
    
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print("–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–æ–≤!")

if __name__ == "__main__":
    main()
