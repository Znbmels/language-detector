#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ FastText –∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
sys.path.append('langdetect')

def test_fasttext():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FastText"""
    try:
        import fasttext
        model = fasttext.load_model('lid.176.bin')
        return model
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ FastText: {e}")
        return None

def test_our_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É"""
    try:
        from enhanced_reels_detector import EnhancedReelsDetector
        detector = EnhancedReelsDetector()
        return detector
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
    fasttext_model = test_fasttext()
    our_detector = test_our_system()
    
    if not fasttext_model or not our_detector:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_cases = [
        {
            'text': 'men super balamyn',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞)',
            'expected': 'kk'
        },
        {
            'text': 'Qazaqstan - menin Otanym!',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (—Ñ—Ä–∞–∑–∞ –ø—Ä–æ –†–æ–¥–∏–Ω—É)',
            'expected': 'kk'
        },
        {
            'text': 'Almaty - Qazaqstannyn en iri qalasy',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–ø—Ä–æ –ê–ª–º–∞—Ç—ã)',
            'expected': 'kk'
        },
        {
            'text': '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º!',
            'description': '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π',
            'expected': 'kk'
        },
        {
            'text': '–ê–±–∞–π “ö“±–Ω–∞–Ω–±–∞–π“±–ª—ã “õ–∞–∑–∞“õ—Ç—ã“£ “±–ª—ã –∞“õ—ã–Ω—ã',
            'description': '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–ø—Ä–æ –ê–±–∞—è)',
            'expected': 'kk'
        },
        {
            'text': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –º–æ—è –†–æ–¥–∏–Ω–∞!',
            'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
            'expected': 'ru'
        },
        {
            'text': 'Kazakhstan is my homeland!',
            'description': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
            'expected': 'en'
        }
    ]
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –¢–ï–ö–°–¢–û–í:")
    print("-" * 50)
    
    fasttext_correct = 0
    our_system_correct = 0
    
    for i, test_case in enumerate(test_cases, 1):
        text = test_case['text']
        description = test_case['description']
        expected = test_case['expected']
        
        print(f"\n{i}. {description}")
        print(f"   –¢–µ–∫—Å—Ç: {text}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FastText
        try:
            predictions = fasttext_model.predict(text)
            fasttext_lang = predictions[0][0].replace('__label__', '')
            fasttext_conf = predictions[1][0]
            
            fasttext_correct += 1 if fasttext_lang == expected else 0
            
            print(f"   üöÄ FastText: {fasttext_lang} ({fasttext_conf:.1%})")
            
        except Exception as e:
            print(f"   üöÄ FastText: –û—à–∏–±–∫–∞ - {e}")
            fasttext_lang = "error"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
        try:
            our_result = our_detector.detect_language(text)
            our_lang = our_result['language']
            our_conf = our_result['confidence']
            our_method = our_result['method']
            
            our_system_correct += 1 if our_lang == expected else 0
            
            print(f"   üè† –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {our_lang} ({our_conf:.1%}) [{our_method}]")
            
        except Exception as e:
            print(f"   üè† –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: –û—à–∏–±–∫–∞ - {e}")
            our_lang = "error"
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if fasttext_lang == expected and our_lang == expected:
            print("   ‚úÖ –û–±–µ —Å–∏—Å—Ç–µ–º—ã –ü–†–ê–í–ò–õ–¨–ù–û")
        elif fasttext_lang == expected:
            print("   üöÄ –¢–æ–ª—å–∫–æ FastText –ü–†–ê–í–ò–õ–¨–ù–û")
        elif our_lang == expected:
            print("   üè† –¢–æ–ª—å–∫–æ –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ü–†–ê–í–ò–õ–¨–ù–û")
        else:
            print("   ‚ùå –û–±–µ —Å–∏—Å—Ç–µ–º—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 50)
    print(f"FastText: {fasttext_correct}/{len(test_cases)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({fasttext_correct/len(test_cases)*100:.1f}%)")
    print(f"–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {our_system_correct}/{len(test_cases)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({our_system_correct/len(test_cases)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –¢–ï–ö–°–¢–û–í:")
    print("-" * 50)
    
    latin_tests = [t for t in test_cases if '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π' in t['description']]
    cyrillic_tests = [t for t in test_cases if '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π' in t['description']]
    
    print(f"–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π ({len(latin_tests)} —Ç–µ—Å—Ç–æ–≤):")
    print(f"  FastText: {'‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if fasttext_correct < len(test_cases) - len(cyrillic_tests) else '‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    print(f"  –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if our_system_correct >= len(latin_tests) else '‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    
    print(f"–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π ({len(cyrillic_tests)} —Ç–µ—Å—Ç–æ–≤):")
    print(f"  FastText: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if fasttext_correct >= len(cyrillic_tests) else '‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    print(f"  –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if our_system_correct >= len(cyrillic_tests) else '‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("-" * 50)
    
    if our_system_correct > fasttext_correct:
        print("üèÜ –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –õ–£–ß–®–ï –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π")
        print("   ‚úÖ –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è")
        print("   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω")
    elif fasttext_correct > our_system_correct:
        print("üöÄ FastText –õ–£–ß–®–ï –¥–ª—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
        print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 176 —è–∑—ã–∫–æ–≤")
        print("   ‚úÖ –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ")
        print("   ‚ùå –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π")
    else:
        print("ü§ù –û–±–µ —Å–∏—Å—Ç–µ–º—ã –∏–º–µ—é—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞!")
        print("   FastText: –¥–ª—è –æ–±—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        print("   –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: –¥–ª—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞")

if __name__ == "__main__":
    main()


