#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
sys.path.append('langdetect')

try:
    from enhanced_reels_detector import EnhancedReelsDetector
    import langdetect as ld
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
try:
    from flask import Flask, render_template, request, jsonify
except ImportError:
    print("Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "flask"])
    from flask import Flask, render_template, request, jsonify

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
detector = None

def init_detector():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
    global detector
    try:
        detector = EnhancedReelsDetector()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: {e}")
        return False

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html')

@app.route('/detect', methods=['POST'])
def detect_language():
    """API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    try:
        data = request.get_json()
        text = data.get('text', '').strip()
        
        if not text:
            return jsonify({
                'success': False,
                'error': '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            })
        
        if not detector:
            return jsonify({
                'success': False,
                'error': '–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        result = detector.detect_language(text)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞
        text_analysis = analyze_text_type(text)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = {
            'success': True,
            'text': text,
            'detection': {
                'language': result['language'],
                'language_name': result['language_name'],
                'confidence': round(result['confidence'] * 100, 1),
                'method': result['method'],
                'status': result['status']
            },
            'analysis': text_analysis,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'all_results' in result and result['all_results']:
            response['detection']['alternatives'] = [
                {
                    'language': lang,
                    'confidence': round(conf * 100, 1)
                }
                for lang, conf in result['all_results'][:3]
            ]
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

def analyze_text_type(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞"""
    analysis = {
        'has_cyrillic_kazakh': False,
        'has_latin_kazakh': False,
        'has_mixed_languages': False,
        'text_length': len(text),
        'word_count': len(text.split()),
        'kazakh_words_found': [],
        'special_chars': []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∑–∞—Ö—Å–∫–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    kazakh_cyrillic_chars = set('”ô“õ“£”©“±“Ø—ñ')
    found_cyrillic = [char for char in text.lower() if char in kazakh_cyrillic_chars]
    if found_cyrillic:
        analysis['has_cyrillic_kazakh'] = True
        analysis['special_chars'] = list(set(found_cyrillic))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∫–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞
    kazakh_latin_words = {
        'qazaq', 'qazaqstan', 'almaty', 'abay', 'nauryz', 'men', 'sen', 'ol',
        'biz', 'siz', 'olar', 'bolyp', 'zhane', 'menin', 'senin', 'onyng',
        'bizding', 'sizding', 'olardyn', 'tili', 'tiller', 'memeleket', 'qala',
        'khalq', 'el', 'adam', 'zhyl', 'kuni', 'mereke', 'koktem', 'tabighat',
        'super', 'balamyn', 'otanym', 'iri', 'aqyny', 'merekesi', 'keluin'
    }
    
    words = text.lower().split()
    found_latin_words = [word for word in words if word in kazakh_latin_words]
    if found_latin_words:
        analysis['has_latin_kazakh'] = True
        analysis['kazakh_words_found'] = found_latin_words
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—à–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏
    has_cyrillic = any('\u0400' <= char <= '\u04FF' for char in text)
    has_latin = any('a' <= char.lower() <= 'z' for char in text)
    has_kazakh_cyrillic = analysis['has_cyrillic_kazakh']
    has_kazakh_latin = analysis['has_latin_kazakh']
    
    if (has_cyrillic and has_latin) or (has_kazakh_cyrillic and has_kazakh_latin):
        analysis['has_mixed_languages'] = True
    
    return analysis

@app.route('/stats')
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        stats = {
            'supported_languages': 24,
            'kazakh_support': True,
            'latin_kazakh_support': True,
            'detector_status': 'active' if detector else 'inactive'
        }
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    if init_detector():
        print("‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞")
        sys.exit(1)
    
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
    print("üìù –í—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'")
    
    app.run(debug=True, host='0.0.0.0', port=8080)
