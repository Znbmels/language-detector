#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ FastText –∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
sys.path.append('langdetect')

def test_fasttext():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FastText"""
    try:
        import fasttext
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        print("–ó–∞–≥—Ä—É–∑–∫–∞ FastText –º–æ–¥–µ–ª–∏...")
        model = fasttext.load_model('lid.176.bin')
        print("‚úÖ FastText –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return model
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FastText: {e}")
        return None

def test_our_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É"""
    try:
        import langdetect as ld
        from enhanced_reels_detector import EnhancedReelsDetector
        
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã...")
        detector = EnhancedReelsDetector()
        print("‚úÖ –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return detector
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return None

def compare_systems():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ–±–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –Ø–ó–´–ö–ê")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
    fasttext_model = test_fasttext()
    our_detector = test_our_system()
    
    if not fasttext_model or not our_detector:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω—É –∏–∑ —Å–∏—Å—Ç–µ–º")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    test_cases = [
        {
            'text': 'men super balamyn',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞)',
            'expected': 'kk'
        },
        {
            'text': 'Qazaqstan - menin Otanym!',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (—Ñ—Ä–∞–∑–∞ –ø—Ä–æ –†–æ–¥–∏–Ω—É)',
            'expected': 'kk'
        },
        {
            'text': 'Almaty - Qazaqstannyn en iri qalasy',
            'description': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–ø—Ä–æ –ê–ª–º–∞—Ç—ã)',
            'expected': 'kk'
        },
        {
            'text': '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º!',
            'description': '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π',
            'expected': 'kk'
        },
        {
            'text': '–ê–±–∞–π “ö“±–Ω–∞–Ω–±–∞–π“±–ª—ã “õ–∞–∑–∞“õ—Ç—ã“£ “±–ª—ã –∞“õ—ã–Ω—ã',
            'description': '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π (–ø—Ä–æ –ê–±–∞—è)',
            'expected': 'kk'
        },
        {
            'text': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –º–æ—è –†–æ–¥–∏–Ω–∞!',
            'description': '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
            'expected': 'ru'
        },
        {
            'text': 'Kazakhstan is my homeland!',
            'description': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫',
            'expected': 'en'
        },
        {
            'text': '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω Kazakhstan –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
            'description': '–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
            'expected': 'kk'
        }
    ]
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –¢–ï–ö–°–¢–û–í:")
    print("-" * 60)
    
    fasttext_correct = 0
    our_system_correct = 0
    
    for i, test_case in enumerate(test_cases, 1):
        text = test_case['text']
        description = test_case['description']
        expected = test_case['expected']
        
        print(f"\n{i}. {description}")
        print(f"   –¢–µ–∫—Å—Ç: {text}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FastText
        fasttext_lang = None
        fasttext_conf = 0
        try:
            fasttext_predictions = fasttext_model.predict(text, k=3)
            fasttext_lang = fasttext_predictions[0][0].replace('__label__', '')
            fasttext_conf = fasttext_predictions[1][0]
            
            fasttext_correct += 1 if fasttext_lang == expected else 0
            
            print(f"   üöÄ FastText: {fasttext_lang} ({fasttext_conf:.1%})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            top3 = []
            for j in range(min(3, len(fasttext_predictions[0]))):
                lang = fasttext_predictions[0][j].replace('__label__', '')
                conf = fasttext_predictions[1][j]
                top3.append(f"{lang}({conf:.1%})")
            print(f"      –¢–æ–ø-3: {', '.join(top3)}")
            
        except Exception as e:
            print(f"   üöÄ FastText: –û—à–∏–±–∫–∞ - {e}")
            fasttext_lang = "error"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
        try:
            our_result = our_detector.detect_language(text)
            our_lang = our_result['language']
            our_conf = our_result['confidence']
            our_method = our_result['method']
            
            our_system_correct += 1 if our_lang == expected else 0
            
            print(f"   üè† –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {our_lang} ({our_conf:.1%}) [{our_method}]")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
            if 'all_results' in our_result and our_result['all_results']:
                top3 = [f"{lang}({conf:.1%})" for lang, conf in our_result['all_results'][:3]]
                print(f"      –¢–æ–ø-3: {', '.join(top3)}")
            
        except Exception as e:
            print(f"   üè† –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: –û—à–∏–±–∫–∞ - {e}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if fasttext_lang == expected and our_lang == expected:
            print("   ‚úÖ –û–±–µ —Å–∏—Å—Ç–µ–º—ã –ü–†–ê–í–ò–õ–¨–ù–û")
        elif fasttext_lang == expected:
            print("   üöÄ –¢–æ–ª—å–∫–æ FastText –ü–†–ê–í–ò–õ–¨–ù–û")
        elif our_lang == expected:
            print("   üè† –¢–æ–ª—å–∫–æ –Ω–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ü–†–ê–í–ò–õ–¨–ù–û")
        else:
            print("   ‚ùå –û–±–µ —Å–∏—Å—Ç–µ–º—ã –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 60)
    print(f"FastText: {fasttext_correct}/{len(test_cases)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({fasttext_correct/len(test_cases)*100:.1f}%)")
    print(f"–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {our_system_correct}/{len(test_cases)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ({our_system_correct/len(test_cases)*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ç–µ–∫—Å—Ç–æ–≤
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–ê–ú –¢–ï–ö–°–¢–û–í:")
    print("-" * 60)
    
    latin_kazakh_tests = [t for t in test_cases if '–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π' in t['description']]
    cyrillic_kazakh_tests = [t for t in test_cases if '–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π' in t['description']]
    
    print(f"–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π ({len(latin_kazakh_tests)} —Ç–µ—Å—Ç–æ–≤):")
    print(f"  FastText: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if any('kk' in str(fasttext_model.predict(t['text'], k=1)[0][0]) for t in latin_kazakh_tests) else '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    print(f"  –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if any(our_detector.detect_language(t['text'])['language'] == 'kk' for t in latin_kazakh_tests) else '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    
    print(f"–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π ({len(cyrillic_kazakh_tests)} —Ç–µ—Å—Ç–æ–≤):")
    print(f"  FastText: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if any('kk' in str(fasttext_model.predict(t['text'], k=1)[0][0]) for t in cyrillic_kazakh_tests) else '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")
    print(f"  –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç' if any(our_detector.detect_language(t['text'])['language'] == 'kk' for t in cyrillic_kazakh_tests) else '‚ùå –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç'}")

if __name__ == "__main__":
    compare_systems()
