#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–∞—Ç–∏–Ω–∏—Ü—ã
"""

import sys
import re
sys.path.append('langdetect')
import langdetect as ld

class SmartKazakhDetector:
    """–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    def __init__(self):
        self.profiles = ld.create_languages_profiles()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ
        self.latin_kazakh_patterns = [
            r'\bqazaq\b',  # qazaq
            r'\bqazaqstan\b',  # qazaqstan
            r'\balmaty\b',  # almaty
            r'\babay\b',  # abay
            r'\bnauryz\b',  # nauryz
            r'\bmen\b',  # men (—è)
            r'\bsen\b',  # sen (—Ç—ã)
            r'\bol\b',  # ol (–æ–Ω)
            r'\bbiz\b',  # biz (–º—ã)
            r'\bsiz\b',  # siz (–≤—ã)
            r'\bolar\b',  # olar (–æ–Ω–∏)
            r'\bbolyp\b',  # bolyp (–±—É–¥—É—á–∏)
            r'\bzhane\b',  # zhane (–∏)
            r'\bmenin\b',  # menin (–º–æ–π)
            r'\bsenin\b',  # senin (—Ç–≤–æ–π)
            r'\bonyng\b',  # onyng (–µ–≥–æ)
            r'\bbizding\b',  # bizding (–Ω–∞—à)
            r'\bsizding\b',  # sizding (–≤–∞—à)
            r'\bolardyn\b',  # olardyn (–∏—Ö)
        ]
        
        # –ö–∞–∑–∞—Ö—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
        self.kazakh_words = {
            'qazaq', 'qazaqstan', 'almaty', 'abay', 'nauryz', 'men', 'sen', 'ol',
            'biz', 'siz', 'olar', 'bolyp', 'zhane', 'menin', 'senin', 'onyng',
            'bizding', 'sizding', 'olardyn', 'tili', 'tiller', 'memeleket', 'qala',
            'khalq', 'el', 'adam', 'zhyl', 'kuni', 'mereke', 'koktem', 'tabighat'
        }
    
    def has_kazakh_cyrillic(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–∞–∑–∞—Ö—Å–∫–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        kazakh_chars = set('”ô“õ“£”©“±“Ø—ñ')
        return any(char in text.lower() for char in kazakh_chars)
    
    def has_latin_kazakh_patterns(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –∫–∞–∑–∞—Ö—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in self.latin_kazakh_patterns:
            if re.search(pattern, text_lower):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞
        words = re.findall(r'\b\w+\b', text_lower)
        kazakh_word_count = sum(1 for word in words if word in self.kazakh_words)
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30% —Å–ª–æ–≤ - –∫–∞–∑–∞—Ö—Å–∫–∏–µ, —Å—á–∏—Ç–∞–µ–º –∫–∞–∑–∞—Ö—Å–∫–∏–º
        if len(words) > 0 and kazakh_word_count / len(words) > 0.3:
            return True
        
        return False
    
    def detect_language(self, text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Å —É—á–µ—Ç–æ–º –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ"""
        
        if not text or not text.strip():
            return {
                'language': None,
                'confidence': 0.0,
                'method': 'empty_text'
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        if self.has_kazakh_cyrillic(text):
            result = ld.detect_language(text, self.profiles)
            result_list = list(result)
            
            if result_list and result_list[0][0] == 'kk':
                return {
                    'language': 'kk',
                    'confidence': result_list[0][1],
                    'method': 'cyrillic_detection'
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        if self.has_latin_kazakh_patterns(text):
            return {
                'language': 'kk',
                'confidence': 0.8,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ
                'method': 'latin_pattern_detection'
            }
        
        # –û–±—ã—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        result = ld.detect_language(text, self.profiles)
        result_list = list(result)
        
        if result_list:
            return {
                'language': result_list[0][0],
                'confidence': result_list[0][1],
                'method': 'standard_detection'
            }
        
        return {
            'language': None,
            'confidence': 0.0,
            'method': 'no_detection'
        }

def test_smart_detector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä"""
    
    print("üß† –¢–ï–°–¢ –£–ú–ù–û–ì–û –î–ï–¢–ï–ö–¢–û–†–ê –ö–ê–ó–ê–•–°–ö–û–ì–û")
    print("=" * 50)
    
    detector = SmartKazakhDetector()
    
    test_cases = [
        # –ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        ("“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º!", "–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        ("–ê–±–∞–π “ö“±–Ω–∞–Ω–±–∞–π“±–ª—ã “õ–∞–∑–∞“õ—Ç—ã“£ “±–ª—ã –∞“õ—ã–Ω—ã", "–ö–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        
        # –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π
        ("men super balamyn", "–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        ("Qazaqstan - menin Otanym!", "–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        ("Almaty - Qazaqstannyn en iri qalasy", "–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        ("Abay Qunanbaiuly qazaqtyn uly aqyny", "–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–∞–∑–∞—Ö—Å–∫–∏–π"),
        
        # –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
        ("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω - –º–æ—è –†–æ–¥–∏–Ω–∞!", "–†—É—Å—Å–∫–∏–π"),
        ("Kazakhstan is my homeland!", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"),
        ("Kazakhstan - mein Heimatland!", "–ù–µ–º–µ—Ü–∫–∏–π"),
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        ("“ö–∞–∑–∞“õ—Å—Ç–∞–Ω Kazakhstan –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", "–°–º–µ—à–∞–Ω–Ω—ã–π"),
        ("Hello –°”ô–ª–µ–º men super balamyn", "–°–º–µ—à–∞–Ω–Ω—ã–π")
    ]
    
    for text, description in test_cases:
        result = detector.detect_language(text)
        
        print(f"\nüìù {description}")
        print(f"   –¢–µ–∫—Å—Ç: {text}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['language']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%})")
        print(f"   –ú–µ—Ç–æ–¥: {result['method']}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if '–∫–∞–∑–∞—Ö—Å–∫–∏–π' in description.lower():
            if result['language'] == 'kk':
                print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!")
            else:
                print("   ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")
        else:
            print("   ‚ÑπÔ∏è  –î—Ä—É–≥–æ–π —è–∑—ã–∫")

if __name__ == "__main__":
    test_smart_detector()
