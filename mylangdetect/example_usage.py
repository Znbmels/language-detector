#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ MyLangDetect.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from detector import TfidfLangID

def example_simple_usage():
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    print("üîç –ü–†–û–°–¢–û–ô –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    detector = TfidfLangID.load_from_package()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
    texts = [
        "Hello, how are you today?",
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–°”ô–ª–µ–º, “õ–∞–ª–∞–π—Å—ã“£?",
        "Hola, ¬øc√≥mo est√°s?",
        "Bonjour, comment allez-vous?",
        "Hallo, wie geht es dir?",
        "Ciao, come stai?",
        "Ol√°, como voc√™ est√°?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—Ç–µ?",
        "ŸÖÿ±ÿ≠ÿ®ÿßÿå ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉÿü"
    ]
    
    print("üìù –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤:")
    print()
    
    for text in texts:
        result = detector.predict_one(text)
        language = result['language']
        confidence = result['confidence']
        
        print(f"–¢–µ–∫—Å—Ç: {text}")
        print(f"–Ø–∑—ã–∫: {language.upper()} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})")
        print("-" * 50)

def example_detailed_analysis():
    """–ü—Ä–∏–º–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    print("\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 40)
    
    detector = TfidfLangID.load_from_package()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    text = "This is a sample text for language detection analysis."
    result = detector.predict_one(text, top_k=5)
    
    print(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç: {text}")
    print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {result['language'].upper()}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")
    print()
    print("–¢–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤:")
    
    for i, (lang, conf) in enumerate(result['top_k'], 1):
        print(f"  {i}. {lang.upper()}: {conf:.2%}")

def example_batch_processing():
    """–ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    print("\nüì¶ –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê")
    print("=" * 40)
    
    detector = TfidfLangID.load_from_package()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    texts = [
        "Good morning!",
        "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!",
        "“ö–∞–π—ã—Ä–ª—ã —Ç–∞“£!",
        "Buenos d√≠as!",
        "Bonjour!",
        "Guten Morgen!",
        "Buongiorno!",
        "Bom dia!",
        "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!",
        "ÿµÿ®ÿßÿ≠ ÿßŸÑÿÆŸäÿ±!"
    ]
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å—Ä–∞–∑—É
    results = detector.predict(texts)
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print()
    
    for text, result in zip(texts, results):
        print(f"'{text}' -> {result['language'].upper()} ({result['confidence']:.1%})")

def example_supported_languages():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤."""
    print("\nüåç –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –Ø–ó–´–ö–ò")
    print("=" * 40)
    
    detector = TfidfLangID.load_from_package()
    
    if detector.le is not None:
        languages = sorted(detector.le.classes_.tolist())
        print(f"–í—Å–µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —è–∑—ã–∫–æ–≤: {len(languages)}")
        print()
        print("–°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤:")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ 10 —è–∑—ã–∫–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(languages), 10):
            chunk = languages[i:i+10]
            print("  " + " ".join(f"{lang.upper():>3}" for lang in chunk))

def example_confidence_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏."""
    print("\nüìä –ê–ù–ê–õ–ò–ó –£–í–ï–†–ï–ù–ù–û–°–¢–ò –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    detector = TfidfLangID.load_from_package()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–∞—Ö —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
    test_cases = [
        ("Hi", "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"),
        ("Hello world", "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç"),
        ("This is a longer text that should provide more context for language detection.", "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç"),
        ("This is a much longer text that contains multiple sentences and should provide excellent context for accurate language detection. The model should be very confident about this prediction.", "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    ]
    
    print("–ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞:")
    print()
    
    for text, description in test_cases:
        result = detector.predict_one(text, top_k=3)
        confidence = result['confidence']
        
        print(f"{description}:")
        print(f"  –¢–µ–∫—Å—Ç: '{text}'")
        print(f"  –Ø–∑—ã–∫: {result['language'].upper()}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
        print("  –¢–æ–ø-3:")
        for i, (lang, conf) in enumerate(result['top_k'], 1):
            print(f"    {i}. {lang.upper()}: {conf:.2%}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
    print("üöÄ –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø MYLANGDETECT")
    print("=" * 50)
    
    try:
        example_simple_usage()
        example_detailed_analysis()
        example_batch_processing()
        example_supported_languages()
        example_confidence_analysis()
        
        print("\n" + "=" * 50)
        print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
