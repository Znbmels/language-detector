#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ MyLangDetect.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
from detector import TfidfLangID

def test_simple_api():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ API."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ API...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        detector = TfidfLangID.load_from_package()
        
        def detect_language(text, top_k=1):
            result = detector.predict_one(text, top_k=top_k)
            return result['language']
        
        def detect_language_detailed(text, top_k=3):
            return detector.predict_one(text, top_k=top_k)
        
        def get_supported_languages():
            if detector.le is None:
                raise RuntimeError("Model not loaded properly")
            return sorted(detector.le.classes_.tolist())
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
        test_texts = [
            ("Hello world", "EN"),
            ("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä", "RU"), 
            ("–°”ô–ª–µ–º –¥“Ø–Ω–∏–µ", "KK"),
            ("Hola mundo", "ES"),
            ("Bonjour le monde", "FR"),
            ("Hallo Welt", "DE")
        ]
        
        print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ detect_language():")
        for text, expected in test_texts:
            result = detect_language(text)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} '{text}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ detect_language_detailed():")
        result = detect_language_detailed("Hello world", top_k=3)
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
        print("\nüåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:")
        languages = get_supported_languages()
        print(f"  –í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: {len(languages)}")
        print(f"  –ü–µ—Ä–≤—ã–µ 10: {languages[:10]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º API: {e}")
        return False

def test_advanced_api():
    """–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ API."""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ API...")
    
    try:
        # TfidfLangID —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        detector = TfidfLangID.load_from_package()
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        result = detector.predict_one("Hello world", top_k=5)
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è 'Hello world':")
        print(f"  –Ø–∑—ã–∫: {result['language']}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")
        print("  –¢–æ–ø-5:")
        for i, (lang, conf) in enumerate(result['top_k'], 1):
            print(f"    {i}. {lang}: {conf:.2%}")
        
        # –¢–µ—Å—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞
        texts = ["Hello", "–ü—Ä–∏–≤–µ—Ç", "–°”ô–ª–µ–º", "Hola", "Bonjour"]
        results = detector.predict(texts)
        print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤:")
        for text, result in zip(texts, results):
            print(f"  '{text}' -> {result['language']} ({result['confidence']:.1%})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ MyLangDetect")
    print("=" * 50)
    
    success = True
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ API
    if not test_simple_api():
        success = False
    
    # –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ API
    if not test_advanced_api():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
