#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ Reels
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∑–∞—Ö—Å–∫–æ–≥–æ –∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
"""

import sys
import os
import json
import logging
from typing import Dict, List, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é langdetect
sys.path.append('langdetect')

import langdetect as ld

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class ReelsLanguageDetector:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Reels"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —è–∑—ã–∫–∞"""
        self.profiles = None
        self.supported_languages = {
            'kk': 'Kazakh',
            'ru': 'Russian', 
            'en': 'English',
            'es': 'Spanish',
            'fr': 'French',
            'de': 'German',
            'it': 'Italian',
            'ar': 'Arabic'
        }
        self._load_profiles()
    
    def _load_profiles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π...")
            self.profiles = ld.create_languages_profiles()
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(self.profiles)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
            raise
    
    def detect_language(self, text: str, min_confidence: float = 0.5) -> Dict:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text (str): –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            min_confidence (float): –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
        """
        if not text or not text.strip():
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'all_results': [],
                'status': 'empty_text'
            }
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        cleaned_text = self._clean_text(text)
        
        if len(cleaned_text) < 10:
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'all_results': [],
                'status': 'text_too_short'
            }
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
            result = ld.detect_language(cleaned_text, self.profiles)
            result_list = list(result)
            
            if not result_list:
                return {
                    'language': None,
                    'language_name': None,
                    'confidence': 0.0,
                    'all_results': [],
                    'status': 'no_detection'
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_lang, best_confidence = result_list[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if best_confidence < min_confidence:
                status = 'low_confidence'
            else:
                status = 'success'
            
            return {
                'language': best_lang,
                'language_name': self.supported_languages.get(best_lang, best_lang),
                'confidence': best_confidence,
                'all_results': result_list[:3],  # –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                'status': status
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
            return {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'all_results': [],
                'status': 'error',
                'error': str(e)
            }
    
    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        import re
        
        # –£–¥–∞–ª—è–µ–º URL
        text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (@username)
        text = re.sub(r'@\w+', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ (#hashtag)
        text = re.sub(r'#\w+', '', text)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)
        
        return text.strip()
    
    def process_reel(self, reel_data: Dict) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ Reel
        
        Args:
            reel_data (Dict): –î–∞–Ω–Ω—ã–µ Reel —Å –ø–æ–ª—è–º–∏ caption –∏/–∏–ª–∏ transcript
            
        Returns:
            Dict: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Reel —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —è–∑—ã–∫–µ
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        text_sources = []
        
        if 'caption' in reel_data and reel_data['caption']:
            text_sources.append(('caption', reel_data['caption']))
        
        if 'transcript' in reel_data and reel_data['transcript']:
            text_sources.append(('transcript', reel_data['transcript']))
        
        if not text_sources:
            reel_data['language_detection'] = {
                'language': None,
                'language_name': None,
                'confidence': 0.0,
                'status': 'no_text'
            }
            return reel_data
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã
        combined_text = ' '.join([text for _, text in text_sources])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        detection_result = self.detect_language(combined_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –¥–∞–Ω–Ω—ã–µ Reel
        reel_data['language_detection'] = detection_result
        
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        reel_data['language'] = detection_result['language']
        reel_data['language_confidence'] = detection_result['confidence']
        
        return reel_data
    
    def process_batch(self, reels_data: List[Dict]) -> List[Dict]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ Reels
        
        Args:
            reels_data (List[Dict]): –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö Reels
            
        Returns:
            List[Dict]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Reels
        """
        processed_reels = []
        
        for i, reel_data in enumerate(reels_data):
            try:
                processed_reel = self.process_reel(reel_data)
                processed_reels.append(processed_reel)
                
                if (i + 1) % 100 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1} Reels")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Reel {i}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º Reel —Å –æ—à–∏–±–∫–æ–π
                reel_data['language_detection'] = {
                    'language': None,
                    'language_name': None,
                    'confidence': 0.0,
                    'status': 'processing_error',
                    'error': str(e)
                }
                processed_reels.append(reel_data)
        
        return processed_reels

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
    detector = ReelsLanguageDetector()
    
    # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö Reels
    sample_reels = [
        {
            'id': 1,
            'caption': '“ö–∞–∑–∞“õ—Å—Ç–∞–Ω - –º–µ–Ω—ñ“£ –û—Ç–∞–Ω—ã–º! üá∞üáø #Kazakhstan #“ö–∞–∑–∞“õ—Å—Ç–∞–Ω',
            'transcript': '–ë“Ø–≥—ñ–Ω –±—ñ–∑ –ê–ª–º–∞—Ç—ã–¥–∞ –∂–∞“£–∞ –∂–æ–±–∞ —Ç—É—Ä–∞–ª—ã –∞–π—Ç–∞–º—ã–∑'
        },
        {
            'id': 2,
            'caption': '–ö—Ä–∞—Å–∏–≤—ã–µ –≤–∏–¥—ã –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ üèîÔ∏è #–ø—Ä–∏—Ä–æ–¥–∞ #–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'transcript': '–°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞–º —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã'
        },
        {
            'id': 3,
            'caption': 'Amazing Kazakhstan! Beautiful nature and culture üåü',
            'transcript': 'Welcome to Kazakhstan, the heart of Central Asia'
        },
        {
            'id': 4,
            'caption': '',  # –ü—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å
            'transcript': ''  # –ü—É—Å—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
        }
    ]
    
    print("=== –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ Reels ===\n")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π Reel
    for reel in sample_reels:
        print(f"Reel ID: {reel['id']}")
        print(f"Caption: {reel['caption']}")
        print(f"Transcript: {reel['transcript']}")
        
        processed_reel = detector.process_reel(reel.copy())
        detection = processed_reel['language_detection']
        
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {detection['language']} ({detection['language_name']})")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection['confidence']:.3f}")
        print(f"–°—Ç–∞—Ç—É—Å: {detection['status']}")
        
        if detection.get('all_results'):
            print(f"–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {detection['all_results']}")
        
        print("-" * 50)
    
    # –ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n=== –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")
    processed_batch = detector.process_batch(sample_reels)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    languages_count = {}
    for reel in processed_batch:
        lang = reel['language_detection']['language']
        if lang:
            languages_count[lang] = languages_count.get(lang, 0) + 1
    
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–æ–≤: {languages_count}")

if __name__ == "__main__":
    main()
